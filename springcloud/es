为什么用es 海量数据查询
    mysql 最左前缀失效 全表扫描
    全文检索、日志分析、监控分析
    轻松支持各种复杂的查询条件: 它是分布式实时文件存储，
    会把每一个字段都编入索引（倒排索引），
    利用高效的倒排索引，以及自定义打分、排序能力与丰富的分词插件等，能实现任意复杂查询条件下的全文检索需求
    可扩展性强：天然支持分布式存储，通过极其简单的配置实现几百上千台服务器的分布式横向扩容，轻松处理 PB 级别的结构化或非结构化数据。
    高可用，容灾性能好：通过使用主备节点，以及故障的自动探测与恢复，有力地保障了高可用
    scalble high performance high avialable

    "search and analytics engine

    比如github的代码检索就是用了ES，百度也有用ES。
    查询压力大，查询条件多样化，多变
    数据量大，但数据结构又不太复杂
    分片 横向扩展 副本高可用 容灾
    全文检索
    日志数据是典型的 unstructured data，而关系型数据库从模型上就是 structured 的。
    日志的使用场景写多改少、查询时效性强、点查询多、查询维度不定
    日志量体量很难规划，需要存储支持灵活地横向扩展
    日志的特性就是无结构、不定长

    对比mysql b+树
    日志的特性就是无结构、不定长
    监听 binlog 插入es

    实时
    分布式
    搜索
    分析


    不适合.ES不支持事务 ES的查询是近实时的，而非实时的


    1.B+树是一种多路查找树，其每一个节点的孩子数可以多于两个，且每一个节点处可以存储多个元素。

    2.每个节点到叶子节点的高度都是相同的，这样可以保证B树的查询是稳定的

    1每一个节点存储的元素是经过排序的，节点的子树满足：左子树元素≤父节点元素；右子树元素>父节点元素

    4.非叶子节点只保存key，叶子节点保存key和data。

    通过查询条件找到主键，再通过主键查询完整信息的过程，



    Term Dictionary
    为了能快速找到某个term，将所有的term排个序，二分法查找term，logN的查找效率，就像通过字典查找一样，这就是Term Dictionary。
    term index 前缀压缩存储
    Finite State Transducers